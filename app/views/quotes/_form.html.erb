<%# This will display validation errors for the Quote and its nested categories %>
<% if @quote.errors.any? %>
  <div class="alert alert-danger">
    <ul>
      <% @quote.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<%# Initiate the form for the @quote object. It will submit to the quotes_path via POST. %>
<%= form_with(model: @quote, local: true) do |f| %>

  <%# This hidden field provides the required user_id from the logged-in user's session. %>
  <%# Users must be logged in to access this form. %>
  <%= f.hidden_field :user_id, value: current_user.id %>

  <%# Field for the main quote text with Bootstrap styling. %>
  <div class="form-group" style="padding-bottom: 10px;">
    <%= f.text_area :quote_text, placeholder: 'Enter the quote text...', class: 'form-control', required: true %>
  </div>

  <%# Dropdown to select a Philosopher. %>
  <div class="form-group" style="padding-bottom: 10px;">
    <%= f.label :philosopher_id %>
    <%= f.collection_select :philosopher_id, Philosopher.all, :id, :fname, { prompt: 'Select a Philosopher' }, { class: 'form-control' } %>
  </div>

  <%# Optional fields for publication year and a user comment. %>
  <div class="form-group" style="padding-bottom: 10px;">
    <%= f.number_field :published_year, placeholder: 'Publication Year (Optional)', class: 'form-control' %>
  </div>
  <div class="form-group" style="padding-bottom: 10px;">
    <%= f.text_area :comment, placeholder: 'Your Comment (Optional)', class: 'form-control' %>
  </div>

  <%# Checkbox to set the quote's visibility. %>
  <div class="form-check" style="padding-bottom: 10px;">
    <%= f.label :is_public do %>
      Make Quote Public
      <%= f.check_box :is_public, class: "form-check-input" %>
    <% end %>
  </div>

  <hr>
  <h5>Categories</h5>
  <%# Container for the quote's categories. %>
  <div id="categories-container">
    <%# Use fields_for to create form elements for the nested quote_categories association. %>
    <%= f.fields_for :quote_categories do |qc| %>
      <div class="category-field row mb-2">
        <div class="col-auto">
          <%# Create a dropdown list to select a category. %>
          <%= qc.label :category_id, "Category", class: "form-label d-inline-block me-2" %>
          <%= qc.collection_select :category_id, Category.all, :id, :category_name, { include_blank: 'Select a category...' }, { class: "form-control d-inline-block" } %>
        </div>
        <div class="col-auto align-self-end">
            <%= qc.hidden_field :_destroy, value: "0", class: "_destroy-field" %>
            <%= link_to '[-] Remove this ingredient', '#', class: 'remove-ingredient', style: "color: red; text-decoration: none;" %> <!-- Allow users to remove a field -->
          </div>
      </div>
    <% end %>
  </div>

  <%# The submit button for the form. %>
  <div class="mt-3">
    <%= f.submit (@quote.persisted? ? 'Update Quote' : 'Create Quote'), class: 'btn btn-primary btn-lg' %>
  </div>
<% end %>

<script>
function setupRemoveIngredient() {
  document.addEventListener('click', function(e) {
    if (e.target && e.target.classList.contains('remove-ingredient')) {
      e.preventDefault();
      const ingredientFields = document.querySelectorAll('.ingredient-field');
      if (ingredientFields.length > 1) {
        const field = e.target.closest('.ingredient-field');
        const destroyInput = field.querySelector('input._destroy-field');
        if (destroyInput) {
          destroyInput.value = '1';
        }
        field.style.display = 'none';
      }
    }
  });
}

document.addEventListener('DOMContentLoaded', setupRemoveIngredient);
document.addEventListener('turbo:load', setupRemoveIngredient);

</script>

